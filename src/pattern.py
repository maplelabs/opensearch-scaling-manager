class Pattern:
    """
    Base class for pattern generation
    """
    def __init__(self, minimum: float, maximum: float):
        """
        initializes the pattern object
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        """
        self.min = minimum
        self.max = maximum

    # def generate_points(self, count):
    #     pass


class Random(Pattern):
    """
    class for generation of random pattern within a given range
    """
    def __init__(self, minimum: float, maximum: float):
        """
        initializes the pattern object        
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        """
        super().__init__(minimum, maximum)

    def generate_points(self, count):
        pass


class SawTooth(Pattern):
    """
    class for generating sawtooth pattern
    """
    def __init__(self, minimum: float, maximum: float, minimum_time: str, maximum_time: str):
        """
        initializes the pattern object
        
        :param minimum: minimum value generated by pattern
        :param maximum: maximum value generated by pattern
        :param minimum_time: time of occurrence of minimum
        :param maximum_time: time of occurrence of maximum
        """
        super().__init__(minimum, maximum)
        self.minimum_time = minimum_time
        self.maximum_time = maximum_time
    
    # TODO: raise Error for aliasing conditions 

    def _sawtooth_generator(self):
        pass

    def generate_points(self, count, duration):
        pass
