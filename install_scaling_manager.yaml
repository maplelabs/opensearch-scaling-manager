---
- name: Build and Pack Scaling Manager
  hosts: localhost
  tasks:
  - name: Build the Scaling Manager
    command: make build
    become: yes
  - name: Pack the Scaling Manager
    command: make pack
    become: yes
  tags: build_and_pack
- name: Install make
  hosts: all
  tasks:
  - name: Install make
    become: yes
    shell:
      cmd: apt install make
  tags: install_make
- name: Install Scaling Manager
  hosts: all
  tasks:
  - name: Transfer the Binaries
    become: yes
    copy:
        src: "{{ src_bin_path | default('/usr/local/scaling_manager_lib') }}/{{ item }}"
        dest: "{{ dest_bin_path | default('/usr/local/scaling_manager_lib/') }}"
        owner: '{{ user | default("ubuntu") }}'
        group: '{{ group | default("ubuntu") }}'
    with_items:
      - scaling_manager.tar.gz
      - GNUmakefile
  - name: Check if make is installed
    become: yes
    command: dpkg-query -W -f='${Status}' make | grep 'install ok installed'
    register: is_make_installed
    failed_when: no
    changed_when: no
  - name: Install make if not installed
    become: yes
    apt:
      name: make
      state: latest
      update_cache: yes
    when: is_make_installed.rc != 0
  - name: Check if ansible is installed
    become: yes
    command: dpkg-query -W -f='${Status}' ansible | grep 'install ok installed'
    register: is_ansible_installed
    failed_when: no
    changed_when: no
  - name: Install ansible if not installed
    become_user: root
    become: yes
    raw: (sudo apt -y update && sudo apt -y install software-properties-common && sudo add-apt-repository --yes --update ppa:ansible/ansible && sudo apt -y install ansible)
    register: task_result
    until: task_result.rc == 0
    retries: 5
    delay: 30
    when: is_ansible_installed.rc != 0
  - name: Installing Scalling Manager
    shell:
    args:
      cmd: make install USER_NAME={{ user | default('ubuntu') }} GROUP={{ group | default('ubuntu') }}
      chdir: "{{ dest_bin_path | default('/usr/local/scaling_manager_lib/') }}"
    become: yes
  - name: Get Jump Host IP
    set_fact:
      jump_host_ip: "{{ ansible_default_ipv4.address }}"
    when: is_sf_cloud | default(False)
  - name: Add is_sf_cloud flag in group vars
    become: true
    lineinfile:
      path: /usr/local/scaling_manager_lib/ansible_scripts/group_vars/all/all.yml
      regexp: "jump_host_bool: .*"
      line: "jump_host_bool: True"
      backup: true
      create: true
    when: is_sf_cloud | default(False)
  - name: Add jump_host_ip in group vars
    become: true
    lineinfile:
      path: /usr/local/scaling_manager_lib/ansible_scripts/group_vars/all/all.yml
      regexp: "jump_host_ip: .*"
      line: "jump_host_ip: {{ jump_host_ip }}"
      backup: true
      create: true
    when: is_sf_cloud | default(False)
  - name: Add jump_host_user in group vars
    become: true
    lineinfile:
      path: /usr/local/scaling_manager_lib/ansible_scripts/group_vars/all/all.yml
      regexp: "jump_host_user: .*"
      line: "jump_host_user: {{ jump_host_user | default('ubuntu') }}"
      backup: true
      create: true
    when: is_sf_cloud | default(False)
  tags: install
- name: Update secret
  hosts: all
  tasks:
  - name: Transfer the secret file
    become: yes
    copy:
        src: "{{ secret_path | default('/usr/local/scaling_manager_lib/.secret.txt') }}"
        dest: /usr/local/scaling_manager_lib/
        owner: '{{ user | default("ubuntu") }}'
        group: '{{ group | default("ubuntu") }}'
  tags: update_secret
- name: Update Config
  hosts: all
  tasks:
  - name: Transfer the Config file
    become: yes
    copy:
        src: "{{ config_path | default('/usr/local/scaling_manager_lib/config.yaml') }}"
        dest: /usr/local/scaling_manager_lib/
        owner: '{{ user | default("ubuntu") }}'
        group: '{{ group | default("ubuntu") }}'
  tags: update_config
- name: Update pem
  hosts: all
  tasks:
  - name: Transfer the PEM file
    become: yes
    copy:
        src: "{{ pem_path | default('/usr/local/scaling_manager_lib/user.pem') }}"
        dest: /usr/local/scaling_manager_lib/user.pem
        owner: '{{ user | default("ubuntu") }}'
        group: '{{ group | default("ubuntu") }}'
        mode: 0600
  tags: update_pem
- name: Start Scaling manager
  hosts: all
  tasks:
  - name: Starting Scaling Manager Service
    become: yes
    systemd:
      name: scaling_manager
      state: started
  # - name: Starting crypto Service
  #   become: yes
  #   systemd:
  #     name: crypto_sm
  #     state: started
  # - name: Starting fetchmetrics Service
  #   become: yes
  #   systemd:
  #     name: fetchmetrics
  #     state: started
  tags: start
- name: Stop Scaling manager
  hosts: all
  tasks:
  - name: Stopping Scaling Manager Service
    become: yes
    systemd:
      name: scaling_manager
      state: stopped
  # - name: Stopping crypto Service
  #   become: yes
  #   systemd:
  #     name: crypto_sm
  #     state: stopped
  # - name: Stopping fetchmetrics Service
  #   become: yes
  #   systemd:
  #     name: fetchmetrics
  #     state: stopped
  tags: stop
- name: Restart Scaling manager
  hosts: all
  tasks:
  - name: Restarting Scaling Manager Service
    become: yes
    systemd:
      name: scaling_manager
      state: restarted
  tags: restart
- name: Scaling manager status
  hosts: all
  tasks:
  - name: Getting the status of Scaling Manager Service
    become: yes
    shell: systemctl status scaling_manager.service
    register: sm_service_status
    ignore_errors: yes
  - name: Printing the status of Scaling Manager Service
    debug:
      var: sm_service_status.stdout_lines
  tags: status
- name: Uninstall Scaling Manager
  hosts: all
  tasks:
  - name: Transfer the Makefile
    become: yes
    copy:
        src: "{{ src_bin_path | default('/usr/local/scaling_manager_lib') }}/GNUmakefile"
        dest: "/tmp"
        owner: '{{ user | default("ubuntu") }}'
        group: '{{ group | default("ubuntu") }}'
  - name: Uninstalling Scalling Manager
    shell:
    args:
      cmd: make uninstall
      chdir: "/tmp"
    become: yes
  tags: uninstall

- name: populate inventory.yaml
  hosts: localhost
  tasks:
  - name:
    uri:
        url: "http://{{ master_node_ip }}:9200/_cat/nodes"
        user: "{{ os_user }}"
        password: "{{ os_pass }}"
        return_content: true
    register: os_nodes_out
  - debug:
       var: os_nodes_out.content
  - set_fact:
       os_nodes: "{{ os_nodes_out.content.split('\n') | select() | list }}"
  - shell: rm -f inventory.yaml
  - shell: echo "{{ item.split(' ')[0] }} ansible_host={{ item.split(' ')[0] }} ansible_user={{ user | default('ubuntu') }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.yaml
    with_items:
      "{{ os_nodes }}"
  tags: populate_inventory_yaml
